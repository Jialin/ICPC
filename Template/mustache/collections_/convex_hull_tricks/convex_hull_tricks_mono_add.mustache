namespace {

{{> floor_div}}

} // namespace

template <typename T> class {{minmax.cap}}ConvexHullTricksAdd{{incdec.cap}} {
private:
  class Line {
  public:
    T a, b, x;

    inline Line(T a_, T b_, T x_) : a(a_), b(b_), x(x_) {}
  };

  vector<Line> lines;

public:
  inline void init(int n = -1) {
    lines.clear();
    {{#container.reserve}}if (n > 0) { lines.reserve(n); }{{/container.reserve}}
  }

  inline void add(T a, T b) {
    static T inf = numeric_limits<T>::{{frontback.inf}}();
    if (lines.empty()) {
      lines.emplace_{{frontback.v}}(a, b, inf);
      return;
    }
    const auto& lastLine = lines.{{frontback.v}}();
    if (lastLine.a == a) {
      if (b {{{minmax.cmp}}} lastLine.b) {
        lines.pop_{{frontback.v}}();
      } else {
        return;
      }
    }
    T x = inf;
    while (!lines.empty()) {
      const auto &line = lines.{{frontback.v}}();
      x = floorDiv(b - line.b, line.a - a);
      if (lines.size() == 1 || line.x {{{frontback.cmp}}} x) {
        break;
      }
      lines.pop_{{frontback.v}}();
    }
    lines.emplace_{{frontback.v}}(a, b, x);
  }

  inline const Line &queryLine(T x) const {
    return *(
        upper_bound(lines.begin(), lines.end(), x,
                    [](const T x_, const Line &line) { return x_ <= line.x; }) -
        1);
  }

  inline T query(T x) const {
    if (lines.empty()) {
      static T inf = numeric_limits<T>::max();
      return inf;
    }
    const auto &line = queryLine(x);
    return line.a * x + line.b;
  }

  inline typename vector<Line>::iterator begin() { return lines.begin(); }

  inline typename vector<Line>::iterator end() { return lines.end(); }

  inline typename vector<Line>::const_iterator cbegin() const {
    return lines.cbegin();
  }

  inline typename vector<Line>::const_iterator cend() const {
    return lines.cend();
  }

  inline int size() const { return static_cast<int>(lines.size()); }
};
