namespace {

{{> floor_div}}

} // namespace

template <typename T> class {{MinMax}}ConvexHullTricks {
private:
  const static T kMinI64 = numeric_limits<T>::min();
  const static T kMaxI64 = numeric_limits<T>::max();

  class Line {
  public:
    T a, b;
    mutable T x;

    inline Line(T a_, T b_) : a(a_), b(b_) {}

    inline bool operator<(const Line &o) const { return o.a {{{lessOp}}} a; }

    inline bool operator<(T x_) const { return x < x_; }
  };

  using Iterator = typename multiset<Line, less<>>::iterator;

  inline void update(const Iterator &x, const Iterator &y) {
    if (y == lines.end()) {
      x->x = kMaxI64;
    } else if (x->a == y->a) {
      x->x = x->b {{{lessOp}}} x->b ? kMaxI64 : kMinI64;
    } else {
      x->x = floorDiv(y->b - x->b, x->a - y->a);
    }
  }

  inline bool inOrder(const Iterator &x, const Iterator &y) const {
    return y == lines.end() || x->x < y->x;
  }

public:
  inline void init() { lines.clear(); }

  inline void add(T a, T b) {
    auto y = lines.emplace(a, b);
    // Remove following lines
    auto z = next(y);
    update(y, z);
    while (!inOrder(y, z)) {
      z = lines.erase(z);
      update(y, z);
    }
    // Remove newly added line
    if (y == lines.begin()) {
      return;
    }
    auto x = prev(y);
    update(x, y);
    if (!inOrder(x, y)) {
      y = lines.erase(y);
      update(x, y);
    }
    // Remove preceeding lines
    for (y = x; x != lines.begin() && !inOrder(--x, y); y = x) {
      update(x, lines.erase(y));
    }
  }

  inline T query(T x) const {
    assert(!lines.empty());
    auto l = lines.lower_bound(x);
    return l->a * x + l->b;
  }

  inline int size() { return static_cast<int>(lines.size()); }

  multiset<Line, less<>> lines;
};
