""""""""""""""""""""""""""""""""""
" Example usage:
"   source $ICPC_HOME/setup/vimrc
""""""""""""""""""""""""""""""""""

"""""""""""""""
" Vundle setup
"""""""""""""""
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}
Plugin 'Valloric/YouCompleteMe'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"""""""""""""
" YCM setup
"""""""""""""
let g:ycm_confirm_extra_conf = 0
let g:ycm_autoclose_preview_window_after_completion = 1

""""""""""""""
" netrw setup
""""""""""""""
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 20
augroup ProjectDrawer
  autocmd!
  autocmd VimEnter * :Vexplore
augroup END

"""""""""""""""""
" Quickfix setup
"""""""""""""""""
augroup qf
  autocmd!
  autocmd QuickFixCmdPost [^l]* cwindow
  autocmd QuickFixCmdPost l*    cwindow
  autocmd VimEnter        *     cwindow
augroup END

""""""""""""""""""""
" Personal settings
""""""""""""""""""""
source $VIMRUNTIME/mswin.vim
source $VIMRUNTIME/vimrc_example.vim
behave mswin

set nowrap
set fileformats=unix
set fileformat=unix
set number tabstop=2 shiftwidth=2 expandtab softtabstop=2
set nobackup
set noundofile
set shell=bash\ --login
colorscheme desert

autocmd FileType c,cpp set cindent cinoptions=:0g0t0(sus
autocmd BufWritePre * :%s/\s\+$//e

map <C-t><C-t> :tabnext<CR>

""""""""""""""""""
" Coding Template
""""""""""""""""""
map gcj ggi#include <algorithm><CR>#include <bitset><CR>#include <cassert><CR>#include <cctype><CR>#include <cstdio><CR>#include <cstdlib><CR>#include <cstring><CR>#include <cmath><CR>#include <functional><CR>#include <iostream><CR>#include <map><CR>#include <numeric><CR>#include <queue><CR>#include <set><CR>#include <sstream><CR>#include <stack><CR>#include <string><CR>#include <unordered_map><CR>#include <unordered_set><CR>#include <utility><CR>#include <vector><CR>using namespace std;<CR><CR>template<class T> using MINHEAP = priority_queue<T, vector<T>, greater<T>>;<CR>using LL = long long;<CR>using ULL = unsigned long long;<CR><CR>#define CAST static_cast<CR>#define SIZE(v) (CAST<int>((v).size()))<CR>#define BEGIN(v) ((v).begin())<CR>#define END(v) ((v).end())<CR>#define ALL(v) BEGIN(v),END(v)<CR>#define SORT(v) sort(ALL(v))<CR>#define UNIQUE(v) SORT(v);(v).erase(unique(ALL(v)),END(v))<CR>#define INDEX(v,x) lower_bound(ALL(v),x)-BEGIN(v)<CR>#define FOR(i,l,r) for(int i=(l);i<(r);++i)<CR><CR><CR><CR>int main() {<CR>int taskNumber; scanf("%d", &taskNumber);<CR>for (int taskIdx = 1; taskIdx <= taskNumber; taskIdx++) {<CR><CR>printf("Case #%d: \n", taskIdx);<CR>}<CR>return 0;<CR>}
map cf ggi#include <algorithm><CR>#include <bitset><CR>#include <cassert><CR>#include <cctype><CR>#include <cstdio><CR>#include <cstdlib><CR>#include <cstring><CR>#include <cmath><CR>#include <functional><CR>#include <iostream><CR>#include <map><CR>#include <numeric><CR>#include <queue><CR>#include <set><CR>#include <sstream><CR>#include <stack><CR>#include <string><CR>#include <unordered_map><CR>#include <unordered_set><CR>#include <utility><CR>#include <vector><CR>using namespace std;<CR><CR>template<class T> using MINHEAP = priority_queue<T, vector<T>, greater<T>>;<CR>using LL = long long;<CR>using ULL = unsigned long long;<CR><CR>#define CAST static_cast<CR>#define SIZE(v) (CAST<int>((v).size()))<CR>#define BEGIN(v) ((v).begin())<CR>#define END(v) ((v).end())<CR>#define ALL(v) BEGIN(v),END(v)<CR>#define SORT(v) sort(ALL(v))<CR>#define UNIQUE(v) SORT(v);(v).erase(unique(ALL(v)),END(v))<CR>#define INDEX(v,x) lower_bound(ALL(v),x)-BEGIN(v)<CR>#define FOR(i,l,r) for(int i=(l);i<(r);++i)<CR><CR><CR><CR>int main() {<CR><CR>return 0;<CR>}


