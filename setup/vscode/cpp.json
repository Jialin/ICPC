{
    "Single Test Case Template": {
        "prefix": "CF",
        "body": [
            "// First batch includes",
            "#include \"common/include.h\"",
            "#include \"common/macros.h\"",
            "#include \"debug/debug_declare.h\"",
            "",
            "// Last include",
            "#include \"debug/debug.h\"",
            "",
            "int main() {",
            "  $1;",
            "  return 0;",
            "}"
        ]
    },
    "format toggle": {
        "prefix": "FORMATTOGGLE",
        "body": [
            "// clang-format off",
            "// clang-format on"
        ]
    },
    "Multiple Test Cases Template": {
        "prefix": "GCJ",
        "body": [
            "// First batch includes",
            "#include \"common/include.h\"",
            "#include \"common/macros.h\"",
            "#include \"debug/debug_declare.h\"",
            "",
            "// Last include",
            "#include \"debug/debug.h\"",
            "",
            "int main() {",
            "  int taskNumber;",
            "  scanf(\"%d\", &taskNumber);",
            "  for (int taskIdx = 1; taskIdx <= taskNumber; ++taskIdx) {",
            "    $1;",
            "    printf(\"Case #%d: \\n\", taskIdx);",
            "  }",
            "  return 0;",
            "}"
        ]
    },
    "UVA Multiple Test Cases Template": {
        "prefix": "UVA",
        "body": [
            "// First batch includes",
            "#include \"common/include.h\"",
            "#include \"common/macros.h\"",
            "#include \"debug/debug_declare.h\"",
            "",
            "// Last include",
            "#include \"debug/debug.h\"",
            "",
            "int main() {",
            "  for (int taskIdx = 1; scanf(\"$1\", ) != EOF; ++taskIdx) {",
            "    ;",
            "    printf(\"Case %d: \\n\", taskIdx);",
            "  }",
            "  return 0;",
            "}"
        ]
    },
    "Leetcode Template": {
        "prefix": "LC",
        "body": [
            "// First batch includes",
            "#include \"common/include.h\"",
            "#include \"common/macros.h\"",
            "#include \"debug/debug_declare.h\"",
            "",
            "#include \"leetcode/binary_tree_macros.h\"",
            "#include \"leetcode/linked_list_macros.h\"",
            "",
            "#include \"leetcode/parse.h\"",
            "#include \"leetcode/binary_tree.h\"",
            "#include \"leetcode/linked_list.h\"",
            "",
            "// Last include",
            "#include \"debug/debug.h\"",
            "",
            "class Solution {",
            "public:",
            "  TODO_return TODO_function_name() {",
            "  }",
            "};",
            "",
            "#ifdef LOCAL",
            "",
            "int main() {",
            "  leetcode::parseVector<int>(\"[1,2,1,2,6,7,5,1]\");",
            "  leetcode::parseVector<vector<int>>(\"[[2],[3,4],[6,5,7],[4,1,8,3]]\");",
            "  leetcode::parseLinkedList(\"[1,3,4,7,1,2,6]\");",
            "  leetcode::parseBinaryTree(\"[5,1,2,3,null,6,4]\");",
            "  {",
            "    auto v1 = leetcode::parseVector<int>(\"[1,2,1,2,6,7,5,1]\");",
            "    auto v2 = leetcode::parseVector<vector<int>>(\"[[2],[3,4],[6,5,7],[4,1,8,3]]\");",
            "    auto res = Solution().TODO_function_name();",
            "    cout << \"=================================================================\\n\";",
            "    DEBUGV(res);",
            "    cout << \"=================================================================\\n\";",
            "  }",
            "  return 0;",
            "}",
            "#endif",
        ]
    }
}
