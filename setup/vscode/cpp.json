{
    "Min Heap": {
        "prefix": "MINHEAP",
        "body": [
            "priority_queue<$1, vector<$1>, greater<$1>>"
        ]
    },
    "format toggle": {
        "prefix": "FORMATTOGGLE",
        "body": [
            "// clang-format off",
            "// clang-format on"
        ]
    },
    "Single Test Case Template": {
        "prefix": "CF",
        "body": [
            "// First batch includes",
            "#include \"common/include.h\"",
            "#include \"common/macros.h\"",
            "#include \"debug/debug_declare.h\"",
            "",
            "// Last include",
            "#include \"debug/debug.h\"",
            "",
            "int main() {",
            "  $1;",
            "  return 0;",
            "}"
        ]
    },
    "Multiple Test Cases Template": {
        "prefix": "GCJ",
        "body": [
            "// First batch includes",
            "#include \"common/include.h\"",
            "#include \"common/macros.h\"",
            "#include \"debug/debug_declare.h\"",
            "",
            "// Last include",
            "#include \"debug/debug.h\"",
            "",
            "int main() {",
            "  int taskNumber;",
            "  scanf(\"%d\", &taskNumber);",
            "  for (int taskIdx = 1; taskIdx <= taskNumber; ++taskIdx) {",
            "    $1;",
            "    printf(\"Case #%d: \\n\", taskIdx);",
            "  }",
            "  return 0;",
            "}"
        ]
    },
    "UVA Multiple Test Cases Template": {
        "prefix": "UVA",
        "body": [
            "// First batch includes",
            "#include \"common/include.h\"",
            "#include \"common/macros.h\"",
            "#include \"debug/debug_declare.h\"",
            "",
            "// Last include",
            "#include \"debug/debug.h\"",
            "",
            "int main() {",
            "  for (int taskIdx = 1; scanf(\"$1\", ) != EOF; ++taskIdx) {",
            "    ;",
            "    printf(\"Case %d: \\n\", taskIdx);",
            "  }",
            "  return 0;",
            "}"
        ]
    },
    "Leetcode Template": {
        "prefix": "LC",
        "body": [
            "// First batch includes",
            "#include \"common/include.h\"",
            "#include \"common/macros.h\"",
            "#include \"debug/debug_declare.h\"",
            "",
            "",
            "#ifdef LOCAL",
            "// Typical types:",
            "// - int",
            "// - vector<int>",
            "// - vector<vector<int>>",
            "// - ListNode*",
            "// - TreeNode*",
            "// - Interval",
            "#define FUNCTION_NAME TODO",
            "#define ARGUMENT_CNT 1",
            "#define RETURN_VOID false",
            "#define ARGUMENT_T_1 string",
            "#define ARGUMENT_T_2 int",
            "#define ARGUMENT_T_3 ListNode*",
            "#define ARGUMENT_T_4 TreeNode*",
            "#define ARGUMENT_T_5 Interval",
            "",
            "const string tests = R\"(",
            "TODO",
            ")\";",
            "#endif",
            "",
            "#include \"leetcode/binary_tree_macros.h\"",
            "#include \"leetcode/linked_list_macros.h\"",
            "",
            "#include \"leetcode/binary_tree.h\"",
            "#include \"leetcode/handler.h\"",
            "#include \"leetcode/linked_list.h\"",
            "",
            "// Last include",
            "#include \"debug/debug.h\"",
            "",
            "class Solution {",
            "public:",
            "  // TODO",
            "};",
            "",
            "#ifdef LOCAL",
            "",
            "int main() {",
            "  leetcode::handle<Solution>(tests);",
            "  return 0;",
            "}",
            "#endif",
        ]
    }
}
