{
    "All": {
        "prefix": "ALL",
        "body": [
            "$1.begin(), $1.end()"
        ]
    },
    "Cast": {
        "prefix": "CAST",
        "body": [
            "static_cast<$1>($2)"
        ]
    },
    "Single Test Case Template": {
        "prefix": "CF",
        "body": [
            "#include <algorithm>",
            "#include <bitset>",
            "#include <cassert>",
            "#include <cctype>",
            "#include <cmath>",
            "#include <complex>",
            "#include <cstddef>",
            "#include <cstdint>",
            "#include <cstdio>",
            "#include <cstring>",
            "#include <functional>",
            "#include <iostream>",
            "#include <map>",
            "#include <set>",
            "#include <string>",
            "#include <tuple>",
            "#include <unordered_map>",
            "#include <unordered_set>",
            "#include <utility>",
            "#include <vector>",
            "",
            "using namespace std;",
            "",
            "#include \"debug/debug.h\"",
            "",
            "int main() {",
            "  $1;",
            "}"
        ]
    },
    "format toggle": {
        "prefix": "FORMATTOGGLE",
        "body": [
            "// clang-format off",
            "// clang-format on"
        ]
    },
    "For loop": {
        "prefix": "FOR",
        "body": [
            "for (int $1 = $2; $1 < $3; ++$1) {",
            "  $4",
            "}"
        ]
    },
    "For loop size": {
        "prefix": "FORSIZE",
        "body": [
            "for (size_t $1 = $2; $1 < $3.size(); ++$1) {",
            "  $4",
            "}"
        ]
    },
    "Memset": {
        "prefix": "MEMSET",
        "body": [
            "memset($1, $2, sizeof($1))"
        ]
    },
    "Multiple Test Cases Template": {
        "prefix": "GCJ",
        "body": [
            "#include <algorithm>",
            "#include <bitset>",
            "#include <cassert>",
            "#include <cctype>",
            "#include <cmath>",
            "#include <complex>",
            "#include <cstddef>",
            "#include <cstdint>",
            "#include <cstdio>",
            "#include <cstring>",
            "#include <functional>",
            "#include <iostream>",
            "#include <map>",
            "#include <set>",
            "#include <string>",
            "#include <tuple>",
            "#include <unordered_map>",
            "#include <unordered_set>",
            "#include <utility>",
            "#include <vector>",
            "",
            "using namespace std;",
            "",
            "#include \"debug/debug.h\"",
            "",
            "int main() {",
            "  int taskNumber;",
            "  scanf(\"%d\", &taskNumber);",
            "  for (int taskIdx = 0; taskIdx < taskNumber; ++taskIdx) {",
            "    $1;",
            "    printf(\"Case #%d: \\n\", taskIdx);",
            "  }",
            "  return 0;",
            "}"
        ]
    },
    "UVA Multiple Test Cases Template": {
        "prefix": "UVA",
        "body": [
            "#include <algorithm>",
            "#include <bitset>",
            "#include <cassert>",
            "#include <cctype>",
            "#include <cmath>",
            "#include <complex>",
            "#include <cstddef>",
            "#include <cstdint>",
            "#include <cstdio>",
            "#include <cstring>",
            "#include <functional>",
            "#include <iostream>",
            "#include <map>",
            "#include <set>",
            "#include <string>",
            "#include <tuple>",
            "#include <unordered_map>",
            "#include <unordered_set>",
            "#include <utility>",
            "#include <vector>",
            "",
            "using namespace std;",
            "",
            "#include \"debug/debug.h\"",
            "",
            "int main() {",
            "  for (int taskIdx = 1; scanf(\"$1\", ) != EOF; ++taskIdx) {",
            "    ;",
            "    printf(\"Case %d: \\n\", taskIdx);",
            "  }",
            "  return 0;",
            "}"
        ]
    },
    "Size": {
        "prefix": "SIZE",
        "body": [
            "static_cast<int>($1.size())"
        ]
    },
    "Sort": {
        "prefix": "SORT",
        "body": [
            "sort($1.begin(), $1.end())"
        ]
    }
}
