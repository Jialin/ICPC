export ICPC_HOME=$HOME/ICPC

function _CPP-run {
  if [[ ! $? -eq 0 ]]; then
    return
  fi
  if [ -z "$2" ]
  then
    echo -e "\033[1;33m... Running & Waiting for input ...\033[0m"
    ./a.out
    return
  fi
  if [ -z "$3" ]
  then
    echo -e "\033[1;33m... Running with data in $2...\033[0m"
    time ./a.out < $2
    return
  fi
  echo -e "\033[1;33m... Running with data in $2 & Writing to $3...\033[0m"
  time ./a.out < $2 > $3
  if [[ -z "$4" ]]
  then
    echo -e "\033[1;33m... Displaying the tail of $3...\033[0m"
    tail $3
  else
    echo -e "\033[1;33m... Comparing $3 && $4...\033[0m"
    diff $3 $4
    echo -e "\033[1;33m... Comparing DONE.\033[0m"
  fi
}

##############################
# Example usage:
#   > CPP-compile A.cpp
#   > CPP-compile A.cpp c++11
##############################
function CPP-compile {
  if [ -z "$1" ]
  then
    echo -e "\033[1;31m... Please enter the CPP source file as the first argument.\033[0m"
    return
  fi

  local std_version=c++14
  if [ -n "$2" ]
  then
    std_version=$2
  fi

  echo -e "\033[1;33m... Compiling $1 (-std=$std_version)...\033[0m"
  g++ "$1" -O3 -g3 \
      -std=$std_version \
      -isystem /usr/local/Cellar/boost/1.73.0/include \
      -Wall \
      -Wno-c++98-compat \
      -Wno-c++98-compat-pedantic \
      -Wno-double-promotion \
      -Wno-exit-time-destructors \
      -Wno-global-constructors \
      -Wno-missing-prototypes \
      -Wno-missing-variable-declarations \
      -Wno-padded \
      -Wno-sign-conversion \
      -Wno-unused-macros \
      -Wno-variadic-macros \
      -Wno-format-nonliteral
  if [[ ! $? -eq 0 ]]; then
    echo -e "\033[1;31m... Failed to compile $1.\033[0m"
    return 1
  fi
  return 0
}

########################################
# Example usage:
#   > CPP-run A.cpp
#   > CPP-run A.cpp input
#   > CPP-run A.cpp input output
#   > CPP-run A.cpp input output answer
########################################
function CPP-run {
  CPP-compile $1
  _CPP-run $@
}

##########################################
# Example usage:
#   > CPP-run03 A.cpp
#   > CPP-run03 A.cpp input
#   > CPP-run03 A.cpp input output
#   > CPP-run03 A.cpp input output answer
##########################################
function CPP-run03 {
  CPP-compile $1 c++03
  _CPP-run $@
}

##########################################
# Example usage:
#   > CPP-run11 A.cpp
#   > CPP-run11 A.cpp input
#   > CPP-run11 A.cpp input output
#   > CPP-run11 A.cpp input output answer
##########################################
function CPP-run11 {
  CPP-compile $1 c++11
  _CPP-run $@
}

####################
# Example usage:
#   > CPP-gen A.cpp
####################
function CPP-gen {
  python3 $ICPC_HOME/setup/cpp_gen.py $@
  return $?
}

########################
# Example usage:
#   > CPP-gen-run A.cpp
########################
function CPP-gen-run {
  CPP-gen $@
  if [ $? = 0 ]
  then
    CPP-run gen/gendebug-$1 ${@:2}
  fi
}

##########################
# Example usage:
#   > CPP-gen-run03 A.cpp
##########################
function CPP-gen-run03 {
  CPP-gen $@
  if [ $? = 0 ]
  then
    CPP-run03 gen/gendebug-$1 ${@:2}
  fi
}

##########################
# Example usage:
#   > CPP-gen-run11 A.cpp
##########################
function CPP-gen-run11 {
  CPP-gen $@
  if [ $? = 0 ]
  then
    CPP-run11 gen/gendebug-$1 ${@:2}
  fi
}

########################
# Example usage:
#   > cpp-compact A.cpp
########################
function cpp-compact {
  python3 $ICPC_HOME/setup/cpp_compact.py $@
}

#################
# Example usage:
#   > unittest
#################
function unittest {
  local current_path=$(pwd)
  trap "cd $current_path; exit" SIGHUP SIGINT SIGTERM
  cd $ICPC_HOME/Template
  bazel build //... --compilation_mode opt && bazel test //... --compilation_mode opt $@
  cd $current_path
}

####################
# Example usage:
#   > unittestdebug
####################
function unittestdebug {
  local current_path=$(pwd)
  trap "cd $current_path; exit" SIGHUP SIGINT SIGTERM
  cd $ICPC_HOME/Template
  bazel test $@ --compilation_mode opt --copt=-DLOCAL
  cd $current_path
}

##################
# Example usage:
#   > mustachegen
##################
function mustachegen {
  local current_path=$(pwd)
  trap "cd $current_path; exit" SIGHUP SIGINT SIGTERM
  cd $ICPC_HOME/Template/mustache
  python3 gen.py
  cd $current_path
}
