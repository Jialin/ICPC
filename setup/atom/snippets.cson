'.source.cpp':
  'ALL':
    'prefix': 'ALL'
    'body': '#define ALL(vs) vs.begin(), vs.end()'

  'CAST':
    'prefix': 'CAST'
    'body': '#define CAST static_cast'

  'CASTI32':
    'prefix': 'CASTI32'
    'body': '#define CASTI32 static_cast<int>'

  'CASTI64':
    'prefix': 'CASTI64'
    'body': '#define CASTI64 static_cast<int64_t>'

  'CLEAR':
    'prefix': 'CLEAR'
    'body': '#define CLEAR(as, v) memset(as, v, sizeof(as))'

  'DEBUG':
    'prefix': 'DEBUG'
    'body': '#define DEBUG(args...) fprintf(stderr, args)'

  'FILL':
    'prefix': 'FILL'
    'body': '#define FILL(vs, v) fill(vs.begin(), vs.end(), v)'

  'FOR':
    'prefix': 'FOR'
    'body': '#define FOR(i, a, b) for (int i = a; i < b; ++i)'

  'FORBACK':
    'prefix': 'FORBACK'
    'body': '#define FORBACK(i, a, b) for (int i = b - 1; i >= a; --i)'

  'FORIF':
    'prefix': 'FORIF'
    'body': '#define FOR(i, a, b, clause) for (int i = a; i < b; ++i) if (clause)'

  'GET0':
    'prefix': 'GET0'
    'body': '#define GET0 get<0>'

  'GET1':
    'prefix': 'GET1'
    'body': '#define GET1 get<1>'

  'GET2':
    'prefix': 'GET2'
    'body': '#define GET2 get<2>'

  'INDEX':
    'prefix': 'INDEX'
    'body': '#define INDEX(idx, v) static_cast<int>(lower_bound(idx.begin(), idx.end(), v) - idx.begin())'

  'LD':
    'prefix': 'LD'
    'body': '#define LD long double'

  'I64':
    'prefix': 'I64'
    'body': '#define I64 int64_t'

  'I128':
    'prefix': 'I128'
    'body': '#define I128 __int128'

  'SIZE':
    'prefix': 'SIZE'
    'body': '#define SIZE(vs) static_cast<int>(vs.size())'

  'SORT':
    'prefix': 'SORT'
    'body': '#define SORT(vs) sort(vs.begin(), vs.end())'

  'SORTUNIQUE':
    'prefix': 'SORTUNIQUE'
    'body': '#define SORTUNIQUE(vs) sort(vs.begin(), vs.end()); vs.erase(unique(vs.begin(), vs.end()), vs.end())'

  'SQR':
    'prefix': 'SQR'
    'body': 'template <typename T> inline T sqr(T x) { return x * x; }'

  'SORTALLIF':
    'prefix': 'SORTALLIF'
    'body': '#define SORTALLIF(vs, clause) sort(vs.begin(), vs.end(), [](const decltype(vs)::value_type &a, const decltype(vs)::value_type &b) { return clause; })'

  'UI64':
    'prefix': 'UI64'
    'body': '#define UI64 uint64_t'

  'CF Template':
    'prefix': 'CF'
    'body': """
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>
using namespace std;

int main() {
  return 0;
}"""

  'GCJ Template':
    'prefix': 'GCJ'
    'body': """
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>
using namespace std;

int main() {
  int taskNumber; scanf("%d", &taskNumber);
  for (int taskIdx = 1; taskIdx <= taskNumber; taskIdx++) {
    printf("Case #%d: \\\\n", taskIdx);
  }
  return 0;
}"""
